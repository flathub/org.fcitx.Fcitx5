From 45c024abc26dcfe07fc688a6b022e484b8275117 Mon Sep 17 00:00:00 2001
From: Weng Xuetian <wengxt@gmail.com>
Date: Mon, 6 May 2024 23:36:20 -0700
Subject: [PATCH] Revert "Destroy virtual keyboard when it is not activated."

This reverts commit b2924bd361680c493463d240a375b3f0948ae48d.

While I don't think it's doing anything wrong, but many wlroots
comopsitor does not like this and may make Gtk app choke.

(#1044, #1037, #1039)
https://github.com/swaywm/sway/issues/8143
---
 src/frontend/waylandim/waylandimserverv2.cpp | 20 ++++++++------------
 src/frontend/waylandim/waylandimserverv2.h   |  4 ++--
 2 files changed, 10 insertions(+), 14 deletions(-)

diff --git a/src/frontend/waylandim/waylandimserverv2.cpp b/src/frontend/waylandim/waylandimserverv2.cpp
index f17e704c..965454fd 100644
--- a/src/frontend/waylandim/waylandimserverv2.cpp
+++ b/src/frontend/waylandim/waylandimserverv2.cpp
@@ -100,8 +100,9 @@ void WaylandIMServerV2::refreshSeat() {
         if (icMap_.count(seat.get())) {
             continue;
         }
-        auto *ic =
-            new WaylandIMInputContextV2(inputContextManager(), this, seat);
+        auto *ic = new WaylandIMInputContextV2(
+            inputContextManager(), this, seat,
+            virtualKeyboardManagerV1_->createVirtualKeyboard(seat.get()));
         ic->setFocusGroup(group_);
         ic->setCapabilityFlags(baseFlags);
     }
@@ -121,10 +122,11 @@ void WaylandIMServerV2::remove(wayland::WlSeat *seat) {
 
 WaylandIMInputContextV2::WaylandIMInputContextV2(
     InputContextManager &inputContextManager, WaylandIMServerV2 *server,
-    std::shared_ptr<wayland::WlSeat> seat)
+    std::shared_ptr<wayland::WlSeat> seat, wayland::ZwpVirtualKeyboardV1 *vk)
     : VirtualInputContextGlue(inputContextManager), server_(server),
       seat_(std::move(seat)),
-      ic_(server->inputMethodManagerV2()->getInputMethod(seat_.get())) {
+      ic_(server->inputMethodManagerV2()->getInputMethod(seat_.get())),
+      vk_(vk) {
     server->add(this, seat_.get());
     ic_->surroundingText().connect(
         [this](const char *text, uint32_t cursor, uint32_t anchor) {
@@ -162,19 +164,13 @@ WaylandIMInputContextV2::WaylandIMInputContextV2(
                                     Key(FcitxKey_None, KeyStates(), vkkey + 8),
                                     WL_KEYBOARD_KEY_STATE_RELEASED);
                     }
+                    vk_->modifiers(0, 0, 0, 0);
                 }
                 focusOutWrapper();
             }
-            vk_.reset();
-            vkReady_ = false;
         }
         if (pendingActivate_) {
             pendingActivate_ = false;
-            vk_.reset();
-            vkReady_ = false;
-            vk_.reset(
-                server_->virtualKeyboardManagerV1()->createVirtualKeyboard(
-                    seat_.get()));
             // There can be only one grab. Always release old grab first.
             // It is possible when switching between two client, there will be
             // two activate. In that case we will have already one grab. The
@@ -424,7 +420,7 @@ void WaylandIMInputContextV2::keymapCallback(uint32_t format, int32_t fd,
     server_->stateMask_.mod5_mask =
         1 << xkb_keymap_mod_get_index(server_->keymap_.get(), "Mod5");
 
-    if (keymapChanged || !vkReady_) {
+    if (keymapChanged) {
         vk_->keymap(format, scopeFD.fd(), size);
         vkReady_ = true;
     }
diff --git a/src/frontend/waylandim/waylandimserverv2.h b/src/frontend/waylandim/waylandimserverv2.h
index 733474bf..9fdf2601 100644
--- a/src/frontend/waylandim/waylandimserverv2.h
+++ b/src/frontend/waylandim/waylandimserverv2.h
@@ -41,7 +41,6 @@ class WaylandIMServerV2 : public WaylandIMServerBase {
     FocusGroup *group() { return group_; }
     auto *xkbState() { return state_.get(); }
     auto *inputMethodManagerV2() { return inputMethodManagerV2_.get(); }
-    auto *virtualKeyboardManagerV1() { return virtualKeyboardManagerV1_.get(); }
 
     bool hasKeyboardGrab() const;
 
@@ -73,7 +72,8 @@ class WaylandIMInputContextV2 : public VirtualInputContextGlue {
 public:
     WaylandIMInputContextV2(InputContextManager &inputContextManager,
                             WaylandIMServerV2 *server,
-                            std::shared_ptr<wayland::WlSeat> seat);
+                            std::shared_ptr<wayland::WlSeat> seat,
+                            wayland::ZwpVirtualKeyboardV1 *vk);
     ~WaylandIMInputContextV2() override;
 
     const char *frontend() const override { return "wayland_v2"; }
